
//! Autogenerated weights for `pallet_ibc`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `daviraindeMacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_ibc
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./frame/ibc/src/weights/mock_client_weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ibc`.
pub struct MockClientWeightInfo<T>(pub PhantomData<T>);

impl<T: frame_system::Config> MockClientWeightInfo<T> {
	pub fn new() -> Self {
		Self(PhantomData)
	}
	// Storage: Ibc ClientCounter (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:0 w:1)
	// Storage: Ibc ClientStates (r:0 w:1)
	// Storage: Ibc ClientProcessedHeights (r:0 w:1)
	// Storage: Ibc ClientProcessedTimes (r:0 w:1)
	// Storage: Ibc Clients (r:0 w:1)
	pub fn create_client_mock(&self) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_all(27_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Ibc ClientStates (r:1 w:1)
	// Storage: Ibc Clients (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Ibc ClientProcessedHeights (r:0 w:1)
	// Storage: Ibc ClientProcessedTimes (r:0 w:1)
	pub fn update_mock_client(&self) -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_all(37_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	pub fn upgrade_mock_client(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc Clients (r:1 w:0)
	// Storage: Ibc ConnectionCounter (r:1 w:1)
	// Storage: Ibc Connections (r:0 w:1)
	// Storage: Ibc ConnectionClient (r:0 w:1)
	pub fn conn_open_init_mock(&self) -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_all(27_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Ibc ConnectionCounter (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc Clients (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:0)
	// Storage: Ibc OldHeight (r:0 w:1)
	pub fn conn_try_open_mock(&self) -> Weight {
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_all(30_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Ibc Connections (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc Clients (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:0)
	// Storage: Ibc OldHeight (r:0 w:1)
	pub fn conn_open_ack_mock(&self) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_all(32_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Ibc Connections (r:1 w:0)
	// Storage: Ibc ClientStates (r:1 w:0)
	// Storage: Ibc Clients (r:1 w:0)
	// Storage: Ibc ConsensusStates (r:1 w:0)
	pub fn conn_open_confirm_mock(&self) -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_all(25_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
	}
	pub fn channel_open_init_mock(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(13_000_000)
	}
	pub fn channel_open_try_mock(&self) -> Weight {
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	pub fn channel_open_ack_mock(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(11_000_000)
	}
	pub fn channel_open_confirm_mock(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	pub fn channel_close_init_mock(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	pub fn channel_close_confirm_mock(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	pub fn recv_packet_mock(&self) -> Weight {
		// Minimum execution time: 11_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	pub fn ack_packet_mock(&self) -> Weight {
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
	pub fn timeout_packet_mock(&self) -> Weight {
		// Minimum execution time: 12_000 nanoseconds.
		Weight::from_all(12_000_000)
	}
}
